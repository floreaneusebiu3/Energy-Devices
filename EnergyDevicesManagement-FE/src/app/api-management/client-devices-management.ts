//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import {
  mergeMap as _observableMergeMap,
  catchError as _observableCatch,
} from 'rxjs/operators';
import {
  Observable,
  throwError as _observableThrow,
  of as _observableOf,
} from 'rxjs';
import { Injectable, Inject, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpResponseBase,
} from '@angular/common/http';

export const API_BASE_URL = 'base';

@Injectable()
export class DeviceManagementClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @param body (optional)
   * @return Success
   */
  devicesPOST(body: DeviceDto | undefined): Observable<DeviceDtoResponse> {
    let url_ = this.baseUrl + '/devices';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDevicesPOST(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDevicesPOST(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DeviceDtoResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DeviceDtoResponse>;
        })
      );
  }

  protected processDevicesPOST(
    response: HttpResponseBase
  ): Observable<DeviceDtoResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = DeviceDtoResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  devicesGET(): Observable<DeviceDtoArrayResponse> {
    let url_ = this.baseUrl + '/devices';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDevicesGET(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDevicesGET(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DeviceDtoArrayResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DeviceDtoArrayResponse>;
        })
      );
  }

  protected processDevicesGET(
    response: HttpResponseBase
  ): Observable<DeviceDtoArrayResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = DeviceDtoArrayResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  devicesPUT(
    id: string,
    body: DeviceDto | undefined
  ): Observable<DeviceDtoResponse> {
    let url_ = this.baseUrl + '/devices/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDevicesPUT(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDevicesPUT(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DeviceDtoResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DeviceDtoResponse>;
        })
      );
  }

  protected processDevicesPUT(
    response: HttpResponseBase
  ): Observable<DeviceDtoResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = DeviceDtoResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = DeviceDtoResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  devicesDELETE(id: string): Observable<DeviceDtoResponse> {
    let url_ = this.baseUrl + '/devices/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDevicesDELETE(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDevicesDELETE(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DeviceDtoResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DeviceDtoResponse>;
        })
      );
  }

  protected processDevicesDELETE(
    response: HttpResponseBase
  ): Observable<DeviceDtoResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = DeviceDtoResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = DeviceDtoResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  devicesGET2(id: string): Observable<DeviceDtoResponse> {
    let url_ = this.baseUrl + '/devices/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDevicesGET2(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDevicesGET2(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DeviceDtoResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DeviceDtoResponse>;
        })
      );
  }

  protected processDevicesGET2(
    response: HttpResponseBase
  ): Observable<DeviceDtoResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = DeviceDtoResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = DeviceDtoResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  all(id: string): Observable<DeviceDtoArrayResponse> {
    let url_ = this.baseUrl + '/devices/all/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAll(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAll(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<DeviceDtoArrayResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<DeviceDtoArrayResponse>;
        })
      );
  }

  protected processAll(
    response: HttpResponseBase
  ): Observable<DeviceDtoArrayResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = DeviceDtoArrayResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = DeviceDtoArrayResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  devicesUsersPOST(body: UserDto | undefined): Observable<StringResponse> {
    let url_ = this.baseUrl + '/devices-users';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDevicesUsersPOST(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDevicesUsersPOST(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<StringResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<StringResponse>;
        })
      );
  }

  protected processDevicesUsersPOST(
    response: HttpResponseBase
  ): Observable<StringResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = StringResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  devicesUsersPUT(
    id: string,
    body: UserDto | undefined
  ): Observable<UserDtoResponse> {
    let url_ = this.baseUrl + '/devices-users/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDevicesUsersPUT(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDevicesUsersPUT(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<UserDtoResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UserDtoResponse>;
        })
      );
  }

  protected processDevicesUsersPUT(
    response: HttpResponseBase
  ): Observable<UserDtoResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserDtoResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = UserDtoResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  devicesUsersDELETE(id: string): Observable<GuidResponse> {
    let url_ = this.baseUrl + '/devices-users/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDevicesUsersDELETE(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDevicesUsersDELETE(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<GuidResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GuidResponse>;
        })
      );
  }

  protected processDevicesUsersDELETE(
    response: HttpResponseBase
  ): Observable<GuidResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GuidResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = GuidResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  devicesUserDevicesPOST(
    body: UserDevicePostDto | undefined
  ): Observable<UserDeviceDtoResponse> {
    let url_ = this.baseUrl + '/devices-userDevices';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDevicesUserDevicesPOST(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDevicesUserDevicesPOST(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<UserDeviceDtoResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UserDeviceDtoResponse>;
        })
      );
  }

  protected processDevicesUserDevicesPOST(
    response: HttpResponseBase
  ): Observable<UserDeviceDtoResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserDeviceDtoResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  devicesUserDevicesGET(): Observable<UserDeviceDtoIEnumerableResponse> {
    let url_ = this.baseUrl + '/devices-userDevices';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDevicesUserDevicesGET(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDevicesUserDevicesGET(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<UserDeviceDtoIEnumerableResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UserDeviceDtoIEnumerableResponse>;
        })
      );
  }

  protected processDevicesUserDevicesGET(
    response: HttpResponseBase
  ): Observable<UserDeviceDtoIEnumerableResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserDeviceDtoIEnumerableResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  devicesUserDevicesDELETE(
    userId: string,
    deviceId: string
  ): Observable<UserDeviceDtoResponse> {
    let url_ = this.baseUrl + '/devices-userDevices/{userId}/{deviceId}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
    if (deviceId === undefined || deviceId === null)
      throw new Error("The parameter 'deviceId' must be defined.");
    url_ = url_.replace('{deviceId}', encodeURIComponent('' + deviceId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDevicesUserDevicesDELETE(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDevicesUserDevicesDELETE(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<UserDeviceDtoResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UserDeviceDtoResponse>;
        })
      );
  }

  protected processDevicesUserDevicesDELETE(
    response: HttpResponseBase
  ): Observable<UserDeviceDtoResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserDeviceDtoResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = UserDeviceDtoResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

export class CustomException implements ICustomException {
  message?: string | undefined;

  constructor(data?: ICustomException) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
    }
  }

  static fromJS(data: any): CustomException {
    data = typeof data === 'object' ? data : {};
    let result = new CustomException();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    return data;
  }
}

export interface ICustomException {
  message?: string | undefined;
}

export class DeviceDto implements IDeviceDto {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  maximuHourlyEnergyConsumption?: number;

  constructor(data?: IDeviceDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.name = _data['name'];
      this.description = _data['description'];
      this.maximuHourlyEnergyConsumption =
        _data['maximuHourlyEnergyConsumption'];
    }
  }

  static fromJS(data: any): DeviceDto {
    data = typeof data === 'object' ? data : {};
    let result = new DeviceDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['name'] = this.name;
    data['description'] = this.description;
    data['maximuHourlyEnergyConsumption'] = this.maximuHourlyEnergyConsumption;
    return data;
  }
}

export interface IDeviceDto {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  maximuHourlyEnergyConsumption?: number;
}

export class DeviceDtoArrayResponse implements IDeviceDtoArrayResponse {
  value?: DeviceDto[] | undefined;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: IDeviceDtoArrayResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['value'])) {
        this.value = [] as any;
        for (let item of _data['value'])
          this.value!.push(DeviceDto.fromJS(item));
      }
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): DeviceDtoArrayResponse {
    data = typeof data === 'object' ? data : {};
    let result = new DeviceDtoArrayResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item.toJSON());
    }
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface IDeviceDtoArrayResponse {
  value?: DeviceDto[] | undefined;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class DeviceDtoResponse implements IDeviceDtoResponse {
  value?: DeviceDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: IDeviceDtoResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.value = _data['value']
        ? DeviceDto.fromJS(_data['value'])
        : <any>undefined;
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): DeviceDtoResponse {
    data = typeof data === 'object' ? data : {};
    let result = new DeviceDtoResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value ? this.value.toJSON() : <any>undefined;
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface IDeviceDtoResponse {
  value?: DeviceDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class GuidResponse implements IGuidResponse {
  value?: string;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: IGuidResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.value = _data['value'];
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GuidResponse {
    data = typeof data === 'object' ? data : {};
    let result = new GuidResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value;
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface IGuidResponse {
  value?: string;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class StringResponse implements IStringResponse {
  value?: string | undefined;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: IStringResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.value = _data['value'];
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): StringResponse {
    data = typeof data === 'object' ? data : {};
    let result = new StringResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value;
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface IStringResponse {
  value?: string | undefined;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class UserDeviceDto implements IUserDeviceDto {
  deviceId?: string;
  userId?: string;
  userName?: string | undefined;
  deviceName?: string | undefined;
  description?: string | undefined;
  address?: string | undefined;
  maximuHourlyEnergyConsumption?: number;

  constructor(data?: IUserDeviceDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.deviceId = _data['deviceId'];
      this.userId = _data['userId'];
      this.userName = _data['userName'];
      this.deviceName = _data['deviceName'];
      this.description = _data['description'];
      this.address = _data['address'];
      this.maximuHourlyEnergyConsumption =
        _data['maximuHourlyEnergyConsumption'];
    }
  }

  static fromJS(data: any): UserDeviceDto {
    data = typeof data === 'object' ? data : {};
    let result = new UserDeviceDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['deviceId'] = this.deviceId;
    data['userId'] = this.userId;
    data['userName'] = this.userName;
    data['deviceName'] = this.deviceName;
    data['description'] = this.description;
    data['address'] = this.address;
    data['maximuHourlyEnergyConsumption'] = this.maximuHourlyEnergyConsumption;
    return data;
  }
}

export interface IUserDeviceDto {
  deviceId?: string;
  userId?: string;
  userName?: string | undefined;
  deviceName?: string | undefined;
  description?: string | undefined;
  address?: string | undefined;
  maximuHourlyEnergyConsumption?: number;
}

export class UserDeviceDtoIEnumerableResponse
  implements IUserDeviceDtoIEnumerableResponse
{
  value?: UserDeviceDto[] | undefined;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: IUserDeviceDtoIEnumerableResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['value'])) {
        this.value = [] as any;
        for (let item of _data['value'])
          this.value!.push(UserDeviceDto.fromJS(item));
      }
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): UserDeviceDtoIEnumerableResponse {
    data = typeof data === 'object' ? data : {};
    let result = new UserDeviceDtoIEnumerableResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item.toJSON());
    }
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface IUserDeviceDtoIEnumerableResponse {
  value?: UserDeviceDto[] | undefined;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class UserDeviceDtoResponse implements IUserDeviceDtoResponse {
  value?: UserDeviceDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: IUserDeviceDtoResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.value = _data['value']
        ? UserDeviceDto.fromJS(_data['value'])
        : <any>undefined;
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): UserDeviceDtoResponse {
    data = typeof data === 'object' ? data : {};
    let result = new UserDeviceDtoResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value ? this.value.toJSON() : <any>undefined;
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface IUserDeviceDtoResponse {
  value?: UserDeviceDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class UserDevicePostDto implements IUserDevicePostDto {
  deviceId?: string;
  userId?: string;
  address?: string | undefined;

  constructor(data?: IUserDevicePostDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.deviceId = _data['deviceId'];
      this.userId = _data['userId'];
      this.address = _data['address'];
    }
  }

  static fromJS(data: any): UserDevicePostDto {
    data = typeof data === 'object' ? data : {};
    let result = new UserDevicePostDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['deviceId'] = this.deviceId;
    data['userId'] = this.userId;
    data['address'] = this.address;
    return data;
  }
}

export interface IUserDevicePostDto {
  deviceId?: string;
  userId?: string;
  address?: string | undefined;
}

export class UserDto implements IUserDto {
  id?: string;
  name?: string | undefined;
  email?: string | undefined;

  constructor(data?: IUserDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.name = _data['name'];
      this.email = _data['email'];
    }
  }

  static fromJS(data: any): UserDto {
    data = typeof data === 'object' ? data : {};
    let result = new UserDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['name'] = this.name;
    data['email'] = this.email;
    return data;
  }
}

export interface IUserDto {
  id?: string;
  name?: string | undefined;
  email?: string | undefined;
}

export class UserDtoResponse implements IUserDtoResponse {
  value?: UserDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: IUserDtoResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.value = _data['value']
        ? UserDto.fromJS(_data['value'])
        : <any>undefined;
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): UserDtoResponse {
    data = typeof data === 'object' ? data : {};
    let result = new UserDtoResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value ? this.value.toJSON() : <any>undefined;
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface IUserDtoResponse {
  value?: UserDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): Observable<any> {
  if (result !== null && result !== undefined) return _observableThrow(result);
  else
    return _observableThrow(
      new ApiException(message, status, response, headers, null)
    );
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
