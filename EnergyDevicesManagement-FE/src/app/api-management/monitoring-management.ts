//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import {
  mergeMap as _observableMergeMap,
  catchError as _observableCatch,
} from 'rxjs/operators';
import {
  Observable,
  throwError as _observableThrow,
  of as _observableOf,
} from 'rxjs';
import { Injectable, Inject, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpResponseBase,
} from '@angular/common/http';

export const API_BASE_URL = 'base';

@Injectable()
export class MonitoringClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  monitoring(
    userId: string,
    deviceId: string,
    timestamp: number
  ): Observable<HourlyMeasurementIEnumerableResponse> {
    let url_ = this.baseUrl + '/monitoring/{userId}/{deviceId}/{timestamp}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
    if (deviceId === undefined || deviceId === null)
      throw new Error("The parameter 'deviceId' must be defined.");
    url_ = url_.replace('{deviceId}', encodeURIComponent('' + deviceId));
    if (timestamp === undefined || timestamp === null)
      throw new Error("The parameter 'timestamp' must be defined.");
    url_ = url_.replace('{timestamp}', encodeURIComponent('' + timestamp));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processMonitoring(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processMonitoring(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<HourlyMeasurementIEnumerableResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<HourlyMeasurementIEnumerableResponse>;
        })
      );
  }

  protected processMonitoring(
    response: HttpResponseBase
  ): Observable<HourlyMeasurementIEnumerableResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 =
            HourlyMeasurementIEnumerableResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

export class CustomException implements ICustomException {
  message?: string | undefined;

  constructor(data?: ICustomException) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
    }
  }

  static fromJS(data: any): CustomException {
    data = typeof data === 'object' ? data : {};
    let result = new CustomException();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    return data;
  }
}

export interface ICustomException {
  message?: string | undefined;
}

export class HourlyMeasurement implements IHourlyMeasurement {
  consumption?: number;
  hour?: number;

  constructor(data?: IHourlyMeasurement) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.consumption = _data['consumption'];
      this.hour = _data['hour'];
    }
  }

  static fromJS(data: any): HourlyMeasurement {
    data = typeof data === 'object' ? data : {};
    let result = new HourlyMeasurement();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['consumption'] = this.consumption;
    data['hour'] = this.hour;
    return data;
  }
}

export interface IHourlyMeasurement {
  consumption?: number;
  hour?: number;
}

export class HourlyMeasurementIEnumerableResponse
  implements IHourlyMeasurementIEnumerableResponse
{
  value?: HourlyMeasurement[] | undefined;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: IHourlyMeasurementIEnumerableResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['value'])) {
        this.value = [] as any;
        for (let item of _data['value'])
          this.value!.push(HourlyMeasurement.fromJS(item));
      }
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): HourlyMeasurementIEnumerableResponse {
    data = typeof data === 'object' ? data : {};
    let result = new HourlyMeasurementIEnumerableResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item.toJSON());
    }
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface IHourlyMeasurementIEnumerableResponse {
  value?: HourlyMeasurement[] | undefined;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): Observable<any> {
  if (result !== null && result !== undefined) return _observableThrow(result);
  else
    return _observableThrow(
      new ApiException(message, status, response, headers, null)
    );
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
