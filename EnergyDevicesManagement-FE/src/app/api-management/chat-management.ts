//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import {
  mergeMap as _observableMergeMap,
  catchError as _observableCatch,
} from 'rxjs/operators';
import {
  Observable,
  throwError as _observableThrow,
  of as _observableOf,
} from 'rxjs';
import { Injectable, Inject, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpResponseBase,
} from '@angular/common/http';

export const API_BASE_URL = 'API_BASE_URL';

@Injectable()
export class ChatManagementClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * @return Success
   */
  admin(): Observable<GroupDtoListResponse> {
    let url_ = this.baseUrl + '/Group/Admin';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAdmin(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAdmin(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GroupDtoListResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GroupDtoListResponse>;
        })
      );
  }

  protected processAdmin(
    response: HttpResponseBase
  ): Observable<GroupDtoListResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GroupDtoListResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  createGroup(
    body: CreateGroupDto | undefined
  ): Observable<CreateGroupDtoResponse> {
    let url_ = this.baseUrl + '/Group/CreateGroup';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processCreateGroup(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processCreateGroup(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<CreateGroupDtoResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<CreateGroupDtoResponse>;
        })
      );
  }

  protected processCreateGroup(
    response: HttpResponseBase
  ): Observable<CreateGroupDtoResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = CreateGroupDtoResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = CreateGroupDtoResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = CreateGroupDtoResponse.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  addUserToGroup(
    groupId: string,
    userId: string
  ): Observable<UserGroupDtoResponse> {
    let url_ = this.baseUrl + '/Group/AddUserToGroup/{GroupId}/{UserId}';
    if (groupId === undefined || groupId === null)
      throw new Error("The parameter 'groupId' must be defined.");
    url_ = url_.replace('{GroupId}', encodeURIComponent('' + groupId));
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{UserId}', encodeURIComponent('' + userId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAddUserToGroup(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAddUserToGroup(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<UserGroupDtoResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UserGroupDtoResponse>;
        })
      );
  }

  protected processAddUserToGroup(
    response: HttpResponseBase
  ): Observable<UserGroupDtoResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserGroupDtoResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = UserGroupDtoResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = UserGroupDtoResponse.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  userTyping(destinationUserId: string, textLength: number): Observable<void> {
    let url_ =
      this.baseUrl + '/Message/UserTyping/{DestinationUserId}/{TextLength}';
    if (destinationUserId === undefined || destinationUserId === null)
      throw new Error("The parameter 'destinationUserId' must be defined.");
    url_ = url_.replace(
      '{DestinationUserId}',
      encodeURIComponent('' + destinationUserId)
    );
    if (textLength === undefined || textLength === null)
      throw new Error("The parameter 'textLength' must be defined.");
    url_ = url_.replace('{TextLength}', encodeURIComponent('' + textLength));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUserTyping(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUserTyping(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processUserTyping(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  group(groupId: string): Observable<MessageDtoListResponse> {
    let url_ = this.baseUrl + '/Message/Group/{GroupId}';
    if (groupId === undefined || groupId === null)
      throw new Error("The parameter 'groupId' must be defined.");
    url_ = url_.replace('{GroupId}', encodeURIComponent('' + groupId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGroup(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGroup(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<MessageDtoListResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<MessageDtoListResponse>;
        })
      );
  }

  protected processGroup(
    response: HttpResponseBase
  ): Observable<MessageDtoListResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = MessageDtoListResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = MessageDtoListResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  userGET(userId: string): Observable<MessageDtoListResponse> {
    let url_ = this.baseUrl + '/Message/User/{UserId}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{UserId}', encodeURIComponent('' + userId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUserGET(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUserGET(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<MessageDtoListResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<MessageDtoListResponse>;
        })
      );
  }

  protected processUserGET(
    response: HttpResponseBase
  ): Observable<MessageDtoListResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = MessageDtoListResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = MessageDtoListResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  groupMessage(
    body: GroupMessageDto | undefined
  ): Observable<GroupMessageDtoResponse> {
    let url_ = this.baseUrl + '/Message/GroupMessage';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGroupMessage(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGroupMessage(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GroupMessageDtoResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GroupMessageDtoResponse>;
        })
      );
  }

  protected processGroupMessage(
    response: HttpResponseBase
  ): Observable<GroupMessageDtoResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GroupMessageDtoResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = GroupMessageDtoResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  userMessage(
    body: UserMessageDto | undefined
  ): Observable<UserMessageDtoResponse> {
    let url_ = this.baseUrl + '/Message/UserMessage';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUserMessage(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUserMessage(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<UserMessageDtoResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UserMessageDtoResponse>;
        })
      );
  }

  protected processUserMessage(
    response: HttpResponseBase
  ): Observable<UserMessageDtoResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserMessageDtoResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = UserMessageDtoResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  userPOST(body: UserDto | undefined): Observable<UserDtoResponse> {
    let url_ = this.baseUrl + '/User';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUserPOST(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUserPOST(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<UserDtoResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UserDtoResponse>;
        })
      );
  }

  protected processUserPOST(
    response: HttpResponseBase
  ): Observable<UserDtoResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserDtoResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = UserDtoResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = UserDtoResponse.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  userPUT(body: UserDto | undefined): Observable<UserDtoResponse> {
    let url_ = this.baseUrl + '/User';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUserPUT(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUserPUT(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<UserDtoResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UserDtoResponse>;
        })
      );
  }

  protected processUserPUT(
    response: HttpResponseBase
  ): Observable<UserDtoResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserDtoResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = UserDtoResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = UserDtoResponse.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  userGET2(): Observable<UserDtoListResponse> {
    let url_ = this.baseUrl + '/User';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUserGET2(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUserGET2(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<UserDtoListResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UserDtoListResponse>;
        })
      );
  }

  protected processUserGET2(
    response: HttpResponseBase
  ): Observable<UserDtoListResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserDtoListResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  userDELETE(userId: string): Observable<UserDtoResponse> {
    let url_ = this.baseUrl + '/User/{UserId}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{UserId}', encodeURIComponent('' + userId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUserDELETE(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUserDELETE(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<UserDtoResponse>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<UserDtoResponse>;
        })
      );
  }

  protected processUserDELETE(
    response: HttpResponseBase
  ): Observable<UserDtoResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserDtoResponse.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = UserDtoResponse.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = UserDtoResponse.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

export class CreateGroupDto implements ICreateGroupDto {
  name?: string | undefined;
  usersId?: string[] | undefined;

  constructor(data?: ICreateGroupDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data['name'];
      if (Array.isArray(_data['usersId'])) {
        this.usersId = [] as any;
        for (let item of _data['usersId']) this.usersId!.push(item);
      }
    }
  }

  static fromJS(data: any): CreateGroupDto {
    data = typeof data === 'object' ? data : {};
    let result = new CreateGroupDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    if (Array.isArray(this.usersId)) {
      data['usersId'] = [];
      for (let item of this.usersId) data['usersId'].push(item);
    }
    return data;
  }
}

export interface ICreateGroupDto {
  name?: string | undefined;
  usersId?: string[] | undefined;
}

export class CreateGroupDtoResponse implements ICreateGroupDtoResponse {
  value?: CreateGroupDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: ICreateGroupDtoResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.value = _data['value']
        ? CreateGroupDto.fromJS(_data['value'])
        : <any>undefined;
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): CreateGroupDtoResponse {
    data = typeof data === 'object' ? data : {};
    let result = new CreateGroupDtoResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value ? this.value.toJSON() : <any>undefined;
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface ICreateGroupDtoResponse {
  value?: CreateGroupDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class CustomException implements ICustomException {
  message?: string | undefined;

  constructor(data?: ICustomException) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.message = _data['message'];
    }
  }

  static fromJS(data: any): CustomException {
    data = typeof data === 'object' ? data : {};
    let result = new CustomException();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['message'] = this.message;
    return data;
  }
}

export interface ICustomException {
  message?: string | undefined;
}

export class GroupDto implements IGroupDto {
  id?: string;
  name?: string | undefined;
  adminId?: string;
  members?: string[] | undefined;

  constructor(data?: IGroupDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.name = _data['name'];
      this.adminId = _data['adminId'];
      if (Array.isArray(_data['members'])) {
        this.members = [] as any;
        for (let item of _data['members']) this.members!.push(item);
      }
    }
  }

  static fromJS(data: any): GroupDto {
    data = typeof data === 'object' ? data : {};
    let result = new GroupDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['name'] = this.name;
    data['adminId'] = this.adminId;
    if (Array.isArray(this.members)) {
      data['members'] = [];
      for (let item of this.members) data['members'].push(item);
    }
    return data;
  }
}

export interface IGroupDto {
  id?: string;
  name?: string | undefined;
  adminId?: string;
  members?: string[] | undefined;
}

export class GroupDtoListResponse implements IGroupDtoListResponse {
  value?: GroupDto[] | undefined;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: IGroupDtoListResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['value'])) {
        this.value = [] as any;
        for (let item of _data['value'])
          this.value!.push(GroupDto.fromJS(item));
      }
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GroupDtoListResponse {
    data = typeof data === 'object' ? data : {};
    let result = new GroupDtoListResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item.toJSON());
    }
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface IGroupDtoListResponse {
  value?: GroupDto[] | undefined;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class GroupMessageDto implements IGroupMessageDto {
  messageText?: string | undefined;
  groupId?: string;

  constructor(data?: IGroupMessageDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.messageText = _data['messageText'];
      this.groupId = _data['groupId'];
    }
  }

  static fromJS(data: any): GroupMessageDto {
    data = typeof data === 'object' ? data : {};
    let result = new GroupMessageDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['messageText'] = this.messageText;
    data['groupId'] = this.groupId;
    return data;
  }
}

export interface IGroupMessageDto {
  messageText?: string | undefined;
  groupId?: string;
}

export class GroupMessageDtoResponse implements IGroupMessageDtoResponse {
  value?: GroupMessageDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: IGroupMessageDtoResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.value = _data['value']
        ? GroupMessageDto.fromJS(_data['value'])
        : <any>undefined;
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): GroupMessageDtoResponse {
    data = typeof data === 'object' ? data : {};
    let result = new GroupMessageDtoResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value ? this.value.toJSON() : <any>undefined;
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface IGroupMessageDtoResponse {
  value?: GroupMessageDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class MessageDto implements IMessageDto {
  messageText?: string | undefined;
  senderId?: string;
  destionationUserId?: string;
  status?: string | undefined;
  senderName?: string | undefined;

  constructor(data?: IMessageDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.messageText = _data['messageText'];
      this.senderId = _data['senderId'];
      this.destionationUserId = _data['destionationUserId'];
      this.status = _data['status'];
      this.senderName = _data['senderName'];
    }
  }

  static fromJS(data: any): MessageDto {
    data = typeof data === 'object' ? data : {};
    let result = new MessageDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['messageText'] = this.messageText;
    data['senderId'] = this.senderId;
    data['destionationUserId'] = this.destionationUserId;
    data['status'] = this.status;
    data['senderName'] = this.senderName;
    return data;
  }
}

export interface IMessageDto {
  messageText?: string | undefined;
  senderId?: string;
  destionationUserId?: string;
  status?: string | undefined;
  senderName?: string | undefined;
}

export class MessageDtoListResponse implements IMessageDtoListResponse {
  value?: MessageDto[] | undefined;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: IMessageDtoListResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['value'])) {
        this.value = [] as any;
        for (let item of _data['value'])
          this.value!.push(MessageDto.fromJS(item));
      }
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): MessageDtoListResponse {
    data = typeof data === 'object' ? data : {};
    let result = new MessageDtoListResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item.toJSON());
    }
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface IMessageDtoListResponse {
  value?: MessageDto[] | undefined;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class UserDto implements IUserDto {
  id?: string;
  name?: string | undefined;
  role?: string | undefined;

  constructor(data?: IUserDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
      this.name = _data['name'];
      this.role = _data['role'];
    }
  }

  static fromJS(data: any): UserDto {
    data = typeof data === 'object' ? data : {};
    let result = new UserDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    data['name'] = this.name;
    data['role'] = this.role;
    return data;
  }
}

export interface IUserDto {
  id?: string;
  name?: string | undefined;
  role?: string | undefined;
}

export class UserDtoListResponse implements IUserDtoListResponse {
  value?: UserDto[] | undefined;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: IUserDtoListResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['value'])) {
        this.value = [] as any;
        for (let item of _data['value']) this.value!.push(UserDto.fromJS(item));
      }
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): UserDtoListResponse {
    data = typeof data === 'object' ? data : {};
    let result = new UserDtoListResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.value)) {
      data['value'] = [];
      for (let item of this.value) data['value'].push(item.toJSON());
    }
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface IUserDtoListResponse {
  value?: UserDto[] | undefined;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class UserDtoResponse implements IUserDtoResponse {
  value?: UserDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: IUserDtoResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.value = _data['value']
        ? UserDto.fromJS(_data['value'])
        : <any>undefined;
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): UserDtoResponse {
    data = typeof data === 'object' ? data : {};
    let result = new UserDtoResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value ? this.value.toJSON() : <any>undefined;
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface IUserDtoResponse {
  value?: UserDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class UserGroupDto implements IUserGroupDto {
  userId?: string;
  groupId?: string;

  constructor(data?: IUserGroupDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.groupId = _data['groupId'];
    }
  }

  static fromJS(data: any): UserGroupDto {
    data = typeof data === 'object' ? data : {};
    let result = new UserGroupDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['groupId'] = this.groupId;
    return data;
  }
}

export interface IUserGroupDto {
  userId?: string;
  groupId?: string;
}

export class UserGroupDtoResponse implements IUserGroupDtoResponse {
  value?: UserGroupDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: IUserGroupDtoResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.value = _data['value']
        ? UserGroupDto.fromJS(_data['value'])
        : <any>undefined;
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): UserGroupDtoResponse {
    data = typeof data === 'object' ? data : {};
    let result = new UserGroupDtoResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value ? this.value.toJSON() : <any>undefined;
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface IUserGroupDtoResponse {
  value?: UserGroupDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class UserMessageDto implements IUserMessageDto {
  messageText?: string | undefined;
  destionationUserId?: string;

  constructor(data?: IUserMessageDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.messageText = _data['messageText'];
      this.destionationUserId = _data['destionationUserId'];
    }
  }

  static fromJS(data: any): UserMessageDto {
    data = typeof data === 'object' ? data : {};
    let result = new UserMessageDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['messageText'] = this.messageText;
    data['destionationUserId'] = this.destionationUserId;
    return data;
  }
}

export interface IUserMessageDto {
  messageText?: string | undefined;
  destionationUserId?: string;
}

export class UserMessageDtoResponse implements IUserMessageDtoResponse {
  value?: UserMessageDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;

  constructor(data?: IUserMessageDtoResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.value = _data['value']
        ? UserMessageDto.fromJS(_data['value'])
        : <any>undefined;
      this.isException = _data['isException'];
      if (Array.isArray(_data['exceptions'])) {
        this.exceptions = [] as any;
        for (let item of _data['exceptions'])
          this.exceptions!.push(CustomException.fromJS(item));
      }
    }
  }

  static fromJS(data: any): UserMessageDtoResponse {
    data = typeof data === 'object' ? data : {};
    let result = new UserMessageDtoResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value ? this.value.toJSON() : <any>undefined;
    data['isException'] = this.isException;
    if (Array.isArray(this.exceptions)) {
      data['exceptions'] = [];
      for (let item of this.exceptions) data['exceptions'].push(item.toJSON());
    }
    return data;
  }
}

export interface IUserMessageDtoResponse {
  value?: UserMessageDto;
  isException?: boolean;
  exceptions?: CustomException[] | undefined;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): Observable<any> {
  if (result !== null && result !== undefined) return _observableThrow(result);
  else
    return _observableThrow(
      new ApiException(message, status, response, headers, null)
    );
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
